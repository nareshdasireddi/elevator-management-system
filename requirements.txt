# Elevator Management System Requirements
# - Python program to determine the optimal number and capacity of elevators for a building, and to schedule elevators for user requests
# - Prompts user for:
#     - Number of floors
#     - Total number of people during peak hours
#     - Maximum acceptable waiting time for an elevator
#     - Floor height (in meters)
#     - (Optional) Preferred elevator capacity
#     - (When scheduling) Their current floor, the direction they want to go (up or down), and their destination floor
# - Validates all user inputs for correctness and positivity
# - Uses standard elevator planning logic and reasonable assumptions for calculations, including user-provided floor height
# - Schedules the elevator to pick up the user and take them to their destination
# - Assigns and displays the most suitable elevator for each request, including elevator number, current floor, and status
# - Simulates elevator movement and updates status as it reaches the user and their destination
# - Shows a summary for each request, including the request details and which elevator was assigned
# - Respects elevator capacity limits
# - Restricts direction options based on floor position:
#     - On lowest floor: only 'up' direction allowed
#     - On highest floor: only 'down' direction allowed
#     - On intermediate floors: both 'up' and 'down' options available
# - Outputs:
#     - Recommended number of elevators
#     - Recommended capacity per elevator
#     - Summary of calculation logic and assumptions
#     - Elevator assignment and status for each user request
# - User-friendly command-line interface with clear instructions and error messages
# - Modular and extensible code structure for future enhancements
# - Compatible with Python 3.x and major operating systems
# - Intended for preliminary planning, estimation, and user-driven scheduling purposes only
# - Unified workflow: estimation followed by scheduling using recommended values
#
 